; opcache must be before xdebug
zend_extension=opcache.so
opcache.enable=1
;opcache.enable_cli=0
opcache.memory_consumption=128
; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=20000
; The maximum percentage of "wasted" memory until a restart is scheduled.
;opcache.max_wasted_percentage=5

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
;opcache.use_cwd=1

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
;opcache.validate_timestamps=1

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
;opcache.revalidate_freq=2

; Enables or disables file search in include_path optimization
;opcache.revalidate_path=0

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
;opcache.save_comments=1

; If enabled, a fast shutdown sequence is used for the accelerated code
;opcache.fast_shutdown=0

; Allow file existence override (file_exists, etc.) performance feature.
;opcache.enable_file_override=0

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
;opcache.optimization_level=0xffffffff

;opcache.inherited_hack=1
;opcache.dups_fix=0

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated.
opcache.blacklist_filename=opcache*.blacklist

; Allows exclusion of large files from being cached. By default all files
; are cached.
;opcache.max_file_size=0

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
;opcache.consistency_checks=0

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
;opcache.force_restart_timeout=180

; OPcache error_log file name. Empty string assumes "stderr".
;opcache.error_log=

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
;opcache.log_verbosity_level=1

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
;opcache.restrict_api=

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
; RPM note : file cache directory must be owned by process owner
;   for mod_php, see /etc/httpd/conf.d/php.conf
;   for php-fpm, see /etc/php-fpm.d/*conf
;opcache.file_cache=

; Enables or disables opcode caching in shared memory.
;opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
;opcache.file_cache_consistency_checks=1

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
;opcache.file_cache_fallback=1

; Validate cached file permissions.
;opcache.validate_permission=0

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
opcache.huge_code_pages=1

extension = apcu.so
;apc.enable_cli=0

;	Sets the path to text files containing caches to load from disk upon
;	initialization of APCu. preload_path should be a directory where each
;	file follows $key.data where $key should be used as the entry name
;	and the contents of the file contains serialized data to use as the value
;	of the entry.
;apc.preload_path=
;apc.shm_size=32M
;apc.ttl=0
;apc.gc_ttl=3600

;	If you begin to get low on resources, an expunge of the cache
;	is performed if it is less than half full. This is not always
;	a suitable way of determining if an expunge of the cache
;	should be per apc.smart allows you to set a runtime configuration
;	value which	is used to determine if an expunge should be run
;	if (available_size < apc.smart * requested_size)
;apc.smart=0
;	Set to zero or omit if you are not sure;
;apc.entries_hint=4096

;	The mktemp-style file_mask to pass to the mmap module 
apc.mmap_file_mask=/tmp/apc.XXXXXX

;	On very busy servers whenever you start the server or
;	modify files you can create a race of many processes
;	all trying to cache the same data at the same time.
;	By default, APCu attempts to prevent "slamming" of a key.
;	A key is considered "slammed" if it was the last key set,
;	and a context other than the current one set it ( ie. it
;	was set by another process or thread )
;apc.slam_defense=1

;	RFC1867 File Upload Progress hook handler
;apc.rfc1867=0
;apc.rfc1867_prefix =upload_
;apc.rfc1867_name=APC_UPLOAD_PROGRESS
;apc.rfc1867_freq=0
;apc.rfc1867_ttl=3600


extension=bz2.so
extension=ctype.so
extension=curl.so
extension=dom.so
extension=exif.so
extension=fileinfo.so
extension=gd.so
extension=gettext.so
extension=iconv.so
extension=intl.so
extension=json.so
extension=mbstring.so
extension=posix.so
extension=pdo.so
extension=pgsql.so
extension=phar.so
extension=shmop.so
extension=simplexml.so
extension=sockets.so
extension=sqlite3.so
extension=sysvshm.so
extension=tokenizer.so
extension=xml.so
extension=xmlwriter.so
extension=xsl.so
extension=pdo_pgsql.so
extension=pdo_sqlte.so
extension=posix.so
extension=xmlreader.so
extension=zip.so
